kube-prometheus-stack:
  alertmanager:
    enabled: ${ alertmanager.enable }
%{ if alertmanager.enable }
    alertmanagerSpec:
      initContainers:
        - name: wait-for-oidc
          image: curlimages/curl:7.79.1
          command:
            - "/bin/sh"
            - "-c"
          args:
            # Wait for URL to be available (not 000) and ready (not 404)
            - until curl -skL -w "%%{http_code}\\n" "${replace(oidc.api_url, "\"", "\\\"")}" -o /dev/null | grep -vq "^\(000\|404\)$"; do echo "waiting for oidc at ${replace(oidc.api_url, "\"", "\\\"")}"; sleep 2; done
      containers:
        - args:
            - "--http-address=0.0.0.0:9095"
            - "--upstream=http://localhost:9093"
            - "--provider=oidc"
            - "--oidc-issuer-url=${replace(oidc.issuer_url, "\"", "\\\"")}"
            - "--client-id=${replace(oidc.client_id, "\"", "\\\"")}"
            - "--client-secret=${replace(oidc.client_secret, "\"", "\\\"")}"
            - "--cookie-secure=false"
            - "--cookie-secret=${replace(cookie_secret, "\"", "\\\"")}"
            - "--email-domain=*"
            - "--redirect-url=https://${alertmanager.domain}/oauth2/callback"
            %{ for arg in oidc.oauth2_proxy_extra_args }
            - ${arg}
            %{ endfor }
          image: quay.io/oauth2-proxy/oauth2-proxy:v7.1.3
          name: alertmanager-proxy
          ports:
            - containerPort: 9095
              name: web
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: "${cluster_issuer}"
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.middlewares: traefik-withclustername@kubernetescrd
        traefik.ingress.kubernetes.io/router.tls: "true"
        ingress.kubernetes.io/ssl-redirect: "true"
        kubernetes.io/ingress.allow-http: "false"
      hosts:
        - "${alertmanager.domain}"
        - "alertmanager.apps.${cluster_info.base_domain}"
      tls:
        - secretName: alertmanager-tls
          hosts:
            - "${alertmanager.domain}"
            - "alertmanager.apps.${cluster_info.base_domain}"
    service:
      targetPort: 9095
    serviceMonitor:
      selfMonitor: false
%{ endif }  # alertmanager config

  grafana:
    enabled: ${grafana.enable}
%{ if grafana.enable }
    adminPassword: "${replace(grafana.admin_password, "\"", "\\\"")}"
    grafana.ini:
      auth.generic_oauth:
        enabled: true
        allow_sign_up: true
        client_id: "${replace(oidc.client_id, "\"", "\\\"")}"
        client_secret: "${replace(oidc.client_secret, "\"", "\\\"")}"
        scopes: "openid profile email"
        auth_url: "${replace(oidc.oauth_url, "\"", "\\\"")}"
        token_url: "${replace(oidc.token_url, "\"", "\\\"")}"
        api_url: "${replace(oidc.api_url, "\"", "\\\"")}"
        %{ for k, v in grafana.generic_oauth_extra_args }
        ${k}: ${v}
        %{ endfor }
      users:
        auto_assign_org_role: Editor
      server:
        domain: "${grafana.domain}"
        root_url: "https://%(domain)s"
    sidecar:
      datasources:
        defaultDatasourceEnabled: false
    additionalDataSources:
      - name: Prometheus
        type: prometheus
        # TODO: fix this 9091 with oauthPassThru
        #url: http://kube-prometheus-stack-prometheus:9091/
        url: ${ can(metrics_archives.bucket_config) ? "http://thanos-query.thanos:9090" : "http://kube-prometheus-stack-prometheus:9090"}
        access: proxy
        isDefault: true
        jsonData:
          tlsAuth: false
          tlsAuthWithCACert: false
          oauthPassThru: true
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: "${cluster_issuer}"
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.middlewares: traefik-withclustername@kubernetescrd
        traefik.ingress.kubernetes.io/router.tls: "true"
        ingress.kubernetes.io/ssl-redirect: "true"
        kubernetes.io/ingress.allow-http: "false"
      hosts:
        - "${grafana.domain}"
        - "grafana.apps.${cluster_info.base_domain}"
      tls:
        - secretName: grafana-tls
          hosts:
            - "grafana.apps.${cluster_info.base_domain}"
            - "${grafana.domain}"
%{ endif } # Grafana config

  prometheus:
    enabled: ${prometheus.enable}
    thanosService:
      enabled: ${ can(metrics_archives.bucket_config) ? true : false  }
%{ if prometheus.enable }
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: "${cluster_issuer}"
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.middlewares: traefik-withclustername@kubernetescrd
        traefik.ingress.kubernetes.io/router.tls: "true"
        ingress.kubernetes.io/ssl-redirect: "true"
        kubernetes.io/ingress.allow-http: "false"
      hosts:
        - "${prometheus.domain}"
        - "prometheus.apps.${cluster_info.base_domain}"
      tls:
        - secretName: prometheus-tls
          hosts:
            - "${prometheus.domain}"
            - "prometheus.apps.${cluster_info.base_domain}"
    prometheusSpec:
%{ if can(metrics_archives.bucket_config) }
      thanos:
        objectStorageConfig:
          key: thanos.yaml
          name: thanos-objectstorage
%{ endif }
      portName: proxy
      initContainers:
        - name: wait-for-oidc
          image: curlimages/curl:7.79.1
          command:
            - "/bin/sh"
            - "-c"
          args:
            # Wait for URL to be available (not 000) and ready (not 404)
            - until curl -skL -w "%%{http_code}\\n" "${replace(oidc.api_url, "\"", "\\\"")}" -o /dev/null | grep -vq "^\(000\|404\)$"; do echo "waiting for oidc at ${replace(oidc.api_url, "\"", "\\\"")}"; sleep 2; done
      containers:
        - args:
            - "--http-address=0.0.0.0:9091"
            - "--upstream=http://localhost:9090"
            - "--provider=oidc"
            - "--oidc-issuer-url=${replace(oidc.issuer_url, "\"", "\\\"")}"
            - "--client-id=${replace(oidc.client_id, "\"", "\\\"")}"
            - "--client-secret=${replace(oidc.client_secret, "\"", "\\\"")}"
            - "--cookie-secure=false"
            - "--cookie-secret=${replace(cookie_secret, "\"", "\\\"")}"
            - "--email-domain=*"
            - "--redirect-url=https://${prometheus.domain}/oauth2/callback"
            %{ for arg in oidc.oauth2_proxy_extra_args }
            - ${arg}
            %{ endfor }
          image: quay.io/oauth2-proxy/oauth2-proxy:v7.1.3
          name: prometheus-proxy
          ports:
            - containerPort: 9091
              name: proxy
      alertingEndpoints:
        - name: kube-prometheus-stack-alertmanager
          namespace: kube-prometheus-stack
          port: 9093
    service:
      port: 9091
      targetPort: 9091
      additionalPorts:
        - name: web
          port: 9090
          targetPort: 9090
    serviceMonitor:
      selfMonitor: false
    additionalPodMonitors:
      - name: alertmanager
        podMetricsEndpoints:
          - path: /metrics
            targetPort: 9093
        namespaceSelector:
          matchNames:
          - kube-prometheus-stack
        selector:
          matchLabels:
            alertmanager: kube-prometheus-stack-alertmanager
            app: alertmanager
      - name: prometheus
        podMetricsEndpoints:
          - path: /metrics
            targetPort: 9090
        namespaceSelector:
          matchNames:
          - kube-prometheus-stack
        selector:
          matchLabels:
            app: prometheus
            prometheus: kube-prometheus-stack-prometheus
%{ if can(metrics_archives.bucket_config) }
  ${ indent(4,yamlencode({"thanosObjectStorageConfig": metrics_archives.bucket_config})) }
%{ endif }
%{ endif } # Prometheus config
